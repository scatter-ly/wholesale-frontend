name: Release wholesale-frontend
on:
  push:
    branches:
      - main
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      ref:
        description: 'GitHub ref to use for deployment. i.e. refs/tags/v0.5.0'
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: 20.x
  NODE_OPTIONS: --max-old-space-size=4096
  cache-prefix: 'wholesale-frontend'

jobs:
  # This step only runs yarn install to make sure that an exact match is available
  # in the cache. The two following verify and tests jobs then always install from cache.
  install:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [20.x]
    env:
      CI: true
      NODE_OPTIONS: --max-old-space-size=8192

    name: Install ${{ matrix.node-version }}
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: cache all node_modules
        id: cache-modules
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ env.cache-prefix }}-${{ matrix.node-version }}-node_modules-${{ hashFiles('yarn.lock', '**/package.json') }}

      # If we get a cache hit for node_modules, there's no need to bring in the global
      # yarn cache or run yarn install, as all dependencies will be installed already.
      - name: find location of global yarn cache
        id: yarn-cache
        if: steps.cache-modules.outputs.cache-hit != 'true'
        shell: bash
        run: echo "dir=$([[ "$(yarn --version)" =~ "1.*" ]] && yarn cache dir || yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: cache global yarn cache
        uses: actions/cache@v4
        if: steps.cache-modules.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ env.cache-prefix }}-${{ matrix.node-version }}-node_modules-${{ hashFiles('yarn.lock', '**/package.json') }}
          restore-keys: |
            ${{ env.cache-prefix }}-${{ matrix.node-version }}-node_modules-

      - name: yarn install
        if: steps.cache-modules.outputs.cache-hit != 'true'
        shell: bash
        run: '[[ "$(yarn --version)" =~ "1.*" ]] && yarn install --frozen-lockfile || yarn install --immutable'

  # The verify jobs runs all the verification that doesn't require a
  # diff towards main, since it takes some time to fetch that.
  verify:
    runs-on: ubuntu-latest
    needs: install
    strategy:
      fail-fast: false
      matrix:
        node-version: [20.x]
    env:
      CI: true
      NODE_OPTIONS: --max-old-space-size=8192

    name: Verify ${{ matrix.node-version }}
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: cache all node_modules
        id: cache-modules
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ env.cache-prefix }}-${{ matrix.node-version }}-node_modules-${{ hashFiles('yarn.lock', '**/package.json') }}

      # If we get a cache hit for node_modules, there's no need to bring in the global
      # yarn cache or run yarn install, as all dependencies will be installed already.
      - name: find location of global yarn cache
        id: yarn-cache
        if: steps.cache-modules.outputs.cache-hit != 'true'
        shell: bash
        run: echo "dir=$([[ "$(yarn --version)" =~ "1.*" ]] && yarn cache dir || yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: cache global yarn cache
        uses: actions/cache@v4
        if: steps.cache-modules.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ env.cache-prefix }}-${{ matrix.node-version }}-node_modules-${{ hashFiles('yarn.lock', '**/package.json') }}
          restore-keys: |
            ${{ env.cache-prefix }}-${{ matrix.node-version }}-node_modules-

      - name: yarn install
        if: steps.cache-modules.outputs.cache-hit != 'true'
        shell: bash
        run: '[[ "$(yarn --version)" =~ "1.*" ]] && yarn install --frozen-lockfile || yarn install --immutable'

      - name: type checking and declarations
        run: yarn tsc --skipLibCheck true --incremental false

      - name: prettier
        run: yarn prettier:check

  build-npm:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      packages: write
      contents: write
      attestations: write
      id-token: write

    needs: install
    strategy:
      fail-fast: false
      matrix:
        node-version: [20.x]
    env:
      CI: true
      NODE_OPTIONS: --max-old-space-size=8192

    name: Build NPM package with NodeJS ${{ matrix.node-version }}
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://npm.pkg.github.com'
          # Defaults to the user or organization that owns the workflow file
          scope: '@scatter-ly'

      - name: cache all node_modules
        id: cache-modules
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ env.cache-prefix }}-${{ matrix.node-version }}-node_modules-${{ hashFiles('yarn.lock', '**/package.json') }}

      # If we get a cache hit for node_modules, there's no need to bring in the global
      # yarn cache or run yarn install, as all dependencies will be installed already.
      - name: find location of global yarn cache
        id: yarn-cache
        if: steps.cache-modules.outputs.cache-hit != 'true'
        shell: bash
        run: echo "dir=$([[ "$(yarn --version)" =~ "1.*" ]] && yarn cache dir || yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: cache global yarn cache
        uses: actions/cache@v4
        if: steps.cache-modules.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ env.cache-prefix }}-${{ matrix.node-version }}-node_modules-${{ hashFiles('yarn.lock', '**/package.json') }}
          restore-keys: |
            ${{ env.cache-prefix }}-${{ matrix.node-version }}-node_modules-

      - name: yarn install
        if: steps.cache-modules.outputs.cache-hit != 'true'
        shell: bash
        run: '[[ "$(yarn --version)" =~ "1.*" ]] && yarn install --frozen-lockfile || yarn install --immutable'

      - name: Generate SPDX SBOM for NPM
        uses: anchore/sbom-action@v0
        with:
          path: ${{ github.workspace }}

      - name: Generate CycloneDX SBOM for NPM
        uses: anchore/sbom-action@v0
        with:
          path: ${{ github.workspace }}
          format: cyclonedx-json

      - name: Generate archive
        run: yarn pack

      - name: Publish NPM package to GitHub with latest tag
        if: github.event.release.prerelease == false && github.event_name == 'release'
        run: |-
          # get git short sha, commit email, commit name
          gitInfo=$(git log --pretty=format:"%h|%ce|%cn" -1)
          email=$(echo $gitInfo | awk -F'|' '{print $2}')
          name=$(echo $gitInfo | awk -F'|' '{print $3}')
          git config --global user.email "$email"
          git config --global user.name "$name"
          npm publish package.tgz --tag latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish NPM package to GitHub with next tag
        if: github.event.release.prerelease == true && github.event_name == 'release'
        run: |-
          # get git short sha, commit email, commit name
          gitInfo=$(git log --pretty=format:"%h|%ce|%cn" -1)
          email=$(echo $gitInfo | awk -F'|' '{print $2}')
          name=$(echo $gitInfo | awk -F'|' '{print $3}')
          git config --global user.email "$email"
          git config --global user.name "$name"
          npm version prerelease --preid=next
          npm publish package.tgz --tag next
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-container:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      packages: write
      contents: write
      attestations: write
      id-token: write
    needs: install
    strategy:
      fail-fast: false
      matrix:
        node-version: [20.x]
    env:
      CI: true
      NODE_OPTIONS: --max-old-space-size=8192

    name: Build Container with NodeJS ${{ matrix.node-version }}
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://npm.pkg.github.com'
          # Defaults to the user or organization that owns the workflow file
          scope: '@scatter-ly'

      - name: cache all node_modules
        id: cache-modules
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ env.cache-prefix }}-${{ matrix.node-version }}-node_modules-${{ hashFiles('yarn.lock', '**/package.json') }}

      # If we get a cache hit for node_modules, there's no need to bring in the global
      # yarn cache or run yarn install, as all dependencies will be installed already.
      - name: find location of global yarn cache
        id: yarn-cache
        if: steps.cache-modules.outputs.cache-hit != 'true'
        shell: bash
        run: echo "dir=$([[ "$(yarn --version)" =~ "1.*" ]] && yarn cache dir || yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: cache global yarn cache
        uses: actions/cache@v4
        if: steps.cache-modules.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ env.cache-prefix }}-${{ matrix.node-version }}-node_modules-${{ hashFiles('yarn.lock', '**/package.json') }}
          restore-keys: |
            ${{ env.cache-prefix }}-${{ matrix.node-version }}-node_modules-

      - name: yarn install
        if: steps.cache-modules.outputs.cache-hit != 'true'
        shell: bash
        run: '[[ "$(yarn --version)" =~ "1.*" ]] && yarn install --frozen-lockfile || yarn install --immutable'

      - name: yarn build
        run: yarn build

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Setup Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opts: image=moby/buildkit:master,network=host

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build and push Docker images
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Parse tags
        id: parse-tags
        run: |-
          echo "${{steps.meta.outputs.tags }}" > /tmp/docker-tags.txt
          tag1=$(head -1 /tmp/docker-tags.txt)
          echo "CHECK_TAG=$tag1" >> $GITHUB_ENV

      - name: Create SBOM for container
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.CHECK_TAG }}
          dependency-snapshot: true

      - name: Generate CycloneDX SBOM for NPM
        uses: anchore/sbom-action@v0
        with:
          format: cyclonedx-json
          image: ${{ env.CHECK_TAG }}
